// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc771.TestingMyCommand.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc771.TestingMyCommand.Robot;

/**
 *
 */
public class TestDrive extends Command {
//This class is our autonomous code. We execute it using flags and command groups
	
    boolean finished;
	int flag = Robot.drive.getFlag();
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TestDrive() { 

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	flag = 0;   //Robot.drive.getFlag();
    	Robot.drive.resetGyro();
		finished = false;
    	if(flag == 0){
    		setTimeout(5);
    	}
    	if(flag == 2){
    		setTimeout(3.8);
    	//	setTimeout(1);
    		setTimeout(1.83);
    	}
    	if(flag == 2){
    		setTimeout(3.2);
    	}
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double angle = Robot.drive.findGyroAngle();
    	double Angle_rate = Robot.drive.findGyroRate();
    	if(flag == 0){
    		Robot.drive.gyroDriveWithSpeed(0.4, angle, Angle_rate);
    	//	Robot.drive.gyroDriveWithSpeed(-0.4, -angle, -Angle_rate);
    	}else if(flag == 1){
    		double target_angle = -135; //negative if the air ship is to the left
    	}else if(flag == 1){
    		double target_angle = 145; //negative if the air ship is to the left
    		double delta_angle = target_angle + angle;
    		Robot.drive.gyroDriveWithSpeed(0.4, delta_angle, Angle_rate);
    		if((delta_angle > -2) && delta_angle < 2){
    			finished = true;
    		}
    	}else{
    		Robot.drive.gyroDriveWithSpeed(-0.4, -angle, -Angle_rate);
    	}
    	SmartDashboard.putNumber("flag", flag);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if(flag == 1){
        	return finished;
        }else{
        	return isTimedOut();
        }
    }

    // Called once after isFinished returns true
    protected void end() {
    	if(flag == 0){
    		Robot.drive.setFlag(1);
    	}else if(flag == 1){
    		Robot.drive.setFlag(2);
    	}else{
    		Robot.drive.killGyro();
    	}
    	
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
